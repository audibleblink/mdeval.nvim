*mdeval.txt*  Evaluate code blocks in markdown and similar formats

CONTENTS                                     *mdeval-contents*

Introduction                                 |mdeval-introduction|
Installation                                 |mdeval-installation|
Usage                                        |mdeval-usage|
Configuration                                |mdeval-configuration|
Commands                                     |mdeval-commands|
Supported Filetypes                          |mdeval-filetypes|
Supported Languages                          |mdeval-languages|

Note: Type |gO| to show the outline of contents.

==============================================================================
INTRODUCTION                                              *mdeval-introduction*

mdeval.nvim is a Neovim plugin inspired by org-mode's evaluating code blocks
feature. It allows you to execute code blocks directly within markdown,
vimwiki, org, and norg files, and automatically inserts the results below
the code block.

This is a complete rewrite focused on simplicity and flexibility.

==============================================================================
INSTALLATION                                              *mdeval-installation*

Using Lazy.nvim:
>lua
    { 'audibleblink/mdeval.nvim' }
<

Using vim-plug:
>vim
    Plug 'audibleblink/mdeval.nvim'
<

Using built-in package manager:
>lua
    vim.pack.add("audibleblink/mdeval.nvim")
<

The plugin will auto-setup with default settings. For custom configuration,
call the setup function (see |mdeval-configuration|).

==============================================================================
USAGE                                                            *mdeval-usage*

Place your cursor inside a fenced code block with a language identifier and
execute the |:MdEval| command. The plugin will execute the code and insert
results right after the code block.

Example:

Before:
>markdown
    ```python
    print("Hello, World!")
    print(2 + 2)
    ```
<

After running `:MdEval`:
>markdown
    ```python
    print("Hello, World!")
    print(2 + 2)
    ```

    **Results:**
    ```
    Hello, World!
    4
    ```
<

To remove results, use |:MdEvalClean| while cursor is in the code block.

==============================================================================
COMMANDS                                                      *mdeval-commands*

                                                                      *:MdEval*
:MdEval                 Execute the code block under the cursor and insert
                        results below it. If results already exist, they will
                        be replaced.

                                                                 *:MdEvalClean*
:MdEvalClean            Remove the results from the code block under cursor.

==============================================================================
CONFIGURATION                                            *mdeval-configuration*

Configure mdeval.nvim by calling the setup function:
>lua
    require('mdeval').setup({
      timeout = -1,
      results_label = "**Results:**",
      tmp_dir = "/tmp/mdeval",
      languages = {
        python = "python3",
        bash = "bash",
      },
    })
<

Configuration Options~

                                                             *mdeval.timeout*
timeout                 Timeout for code execution in seconds. Set to -1 to
                        disable timeout.

                        Type: `number`
                        Default: `-1`

                                                        *mdeval.results_label*
results_label           The string inserted before code evaluation output.

                        Type: `string`
                        Default: `"**Results:**"`

                                                             *mdeval.tmp_dir*
tmp_dir                 Directory used to store temporary source files and
                        compiled artifacts.

                        Type: `string`
                        Default: `"/tmp/mdeval"`

                                                          *mdeval.languages*
languages               Table mapping language codes to execution commands.

                        Commands can use placeholders:
                        - `{file}` - Path to temporary source file
                        - `{tmp}` - Temp directory path

                        If a command contains `{file}`, code is written to a
                        file first. Otherwise, code is passed via stdin.

                        Type: `table`
                        See |mdeval-languages| for defaults.

Example Configuration:
>lua
    require('mdeval').setup({
      timeout = 10,
      results_label = "Output:",
      languages = {
        -- Interpreters (code via stdin)
        python = "python3",
        ruby = "ruby -w",
        
        -- Compilers (use placeholders)
        cpp = "g++ -std=c++20 {file} -o {tmp}/a.out && {tmp}/a.out",
        c = "gcc -Wall {file} -o {tmp}/a.out && {tmp}/a.out",
        
        -- Custom languages
        racket = "racket",
        go = "go run {file}",
      },
    })
<

                                                         *mdeval.delimiters*
delimiters              Code block delimiters for different filetypes.
                        See |mdeval-filetypes| for defaults.

                        Type: `table`

==============================================================================
SUPPORTED FILETYPES                                        *mdeval-filetypes*

The plugin recognizes code blocks in these filetypes:

    markdown             Fenced blocks: ``` ... ```
    markdown.pandoc      Fenced blocks: ``` ... ```
    vimwiki              Code blocks: {{{ ... }}}
    org                  Source blocks: #+BEGIN_SRC ... #+END_SRC
    norg                 Code blocks: @code ... @end

Custom delimiters can be added via the `delimiters` config option:
>lua
    require('mdeval').setup({
      delimiters = {
        myformat = { "<<<", ">>>" },
      },
    })
<

==============================================================================
SUPPORTED LANGUAGES                                        *mdeval-languages*

Default language configurations:

Interpreters (code via stdin):
    bash, sh             bash
    python, py           python3
    lua                  lua
    ruby                 ruby
    js                   node
    haskell              runghc

Compilers (file-based execution):
    c                    gcc {file} -o {tmp}/a.out && {tmp}/a.out
    cpp                  g++ {file} -o {tmp}/a.out && {tmp}/a.out
    rust                 rustc {file} -o {tmp}/a.out && {tmp}/a.out

You can override or add languages in your setup configuration.

==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:et:sw=4:fen:fdm=marker:fmr={{{,}}}:

